@page "/"
@inject McpChatClient chatClient
@inject IJSRuntime jsRuntime

<div class="chat-wrapper">
    <div class="logo" >
        <img src="family-tree-logo.png" />
    </div>
    <div id="chat-container" class="chat-container">
        @foreach (var msg in messages)
        {
            <div class="message @GetMessageClass(msg.Type)">
                @msg.Text
            </div>
        }
        @if (isThinking)
        {
            <div class="message thinking-message">
                The AI is thinking
                <span class="thinking-dots">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                </span>
            </div>
        }
    </div>
    <input @bind="inputText" @bind:event="oninput" placeholder="Ask your question..." @onkeydown="HandleKeyDown" class="chat-input" />
</div>

@code {
    private string inputText = "";
    private readonly List<ChatMessage> messages = new();
    private bool isThinking = false;

    async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SubmitMessage();
        }
    }

    async Task SubmitMessage()
    {
        if (string.IsNullOrWhiteSpace(inputText))
        {
            return;
        }

        // Add user message and clear input.
        messages.Add(new ChatMessage { Text = inputText, Type = ChatMessageType.User });
        inputText = "";
        isThinking = true;
        StateHasChanged();

        try
        {
            var response = await chatClient.Chat(messages[messages.Count - 1].Text);
            messages.Add(new ChatMessage { Text = response ?? "", Type = ChatMessageType.AI });
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage { Text = ex.Message, Type = ChatMessageType.Error });
        }
        finally
        {
            isThinking = false;
            await ScrollChatToBottom();
        }
    }

    async Task ScrollChatToBottom()
    {
        await jsRuntime.InvokeVoidAsync("scrollChatToBottom");
    }

    private string GetMessageClass(ChatMessageType type)
    {
        return type switch
        {
            ChatMessageType.User => "user-message",
            ChatMessageType.AI => "ai-message",
            _ => "error-message",
        };
    }

    public class ChatMessage
    {
        public string Text { get; set; } = "";
        public ChatMessageType Type { get; set; }
    }

    public enum ChatMessageType
    {
        User,
        AI,
        Error
    }
}
